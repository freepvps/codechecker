from token import TokenType
from tokenparser import tokenize
from javaparser import parse as parse_java


importance_features = [
    False, False, False, False, False, False, False, False, False, False,
    True, False, False, False, True, True, False, False, False, False,
    True, False, False, True, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, True, False, False, False, True, True,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, True,
    False, False, False, False, False, False, True, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, True, True, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, True, False, False, False, True, False, False, False,
    False, False, False, False, False, True, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, True, False, False, False, True, False, False, False, True,
    False, False, False, True, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, True, True, False,
    False, False, False, False, False, False, False, False, False, False,
    False, True, True, True, True, False, True, False, False, False,
    True, True, False, False, False, True, False, False, False, False,
    False, False, False, False, False, False, False, True, True, True,
    True, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, True, False, True, False, False, False,
    True, True, False, False, False, True, True, True, False, True, False,
    False, True, True, False, False, False, True, True, True, False,
    True, True, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, True, False, False,
    True, True, True, False, True, False, False, True, False, False,
    False, False, True, False, True, False, False, False, False, True,
    False, False, True, False, True, False, False, True, True, False,
    False, False, False, False, False, False, False, False, False, True,
    True, True, True, True, False, False, True, False, False, False,
    False, False, True, False, False, False, False, False, False, True,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    True, False, False, False, True, False, True, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, True, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, True, False, True,
    True, False, False, True, False, False, True, False, True, False,
    True, True, True, True, True, True, True, True, False, True, False,
    False, False, False, True, False, False, False, False, False, False,
    False, False, False, True, False, False, False, False, False, True,
    True, False, True, False, False, False, True, False, True, False,
    True, True, True, False, False, True, False, True, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, True, False, False, False, False, True, False, True, False,
    False, False, True, False, False, True, True, False, False, False,
    False, False, False, True, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, True, False, False,
    False, False, False, False, False, False, False, True, False, False,
    False, False, False, True, False, True, False, True, False, True,
    False, False, True, False, False, False, False, False, True, False,
    True, True, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, True, False, False, False,
    False, False, False, False, False, False, True, False, False, True,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, True, False,
    False, False, False, False, False, False, False, True, True, False,
    False, True, False, False, False, False, False, False, True, False,
    False, False, False, False, False, False, False, False, False, False,
    True, False, False, False, False, True, False, False, False, True,
    False, False, False, True, False, False, False, False, False, False,
    True, False, False, False, False, False, False, False, False, False,
    True, False, True, False, False, False, True, False, False, False,
    False, True, False, False, False, True, False, False, False, False,
    False, False, True, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    True, False, False, False, False, False, False, False, True, False,
    True, False, True, True, False, True, True, False, True, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False, False, False, False, False, False, False, False, False,
    False, False
]


def extract_features(s):
    """
    :type s: basestring
    :param s: input code
    :return: features list
    :rtype: list[int]
    """
    features = parse_java(tokenize(s))
    return [f for i, f in enumerate(features) if importance_features[i]]
